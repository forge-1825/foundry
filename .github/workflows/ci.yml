name: Foundry CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black mypy pylint bandit safety
          pip install -r backend/requirements.txt
          
      - name: Run Black formatter check
        run: black --check backend/ scripts/
        
      - name: Run Flake8 linter
        run: flake8 backend/ scripts/ --max-line-length=100 --extend-ignore=E203
        
      - name: Run Pylint
        run: pylint backend/ scripts/ --fail-under=8.0
        
      - name: Run MyPy type checker
        run: mypy backend/ scripts/ --ignore-missing-imports
        
      - name: Run Bandit security linter
        run: bandit -r backend/ scripts/ -ll
        
      - name: Check dependencies for vulnerabilities
        run: safety check -r backend/requirements.txt

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio
          
      - name: Run unit tests
        run: |
          pytest tests/ -m "unit" -v --cov=backend --cov=scripts --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python-version }}

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov
          
      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" -v --cov=backend --cov-report=xml
        env:
          REDIS_URL: redis://localhost:6379
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: integration

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: foundry-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: foundry-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker Compose
        run: |
          docker-compose config
          docker-compose up -d
          sleep 30
          docker-compose ps
          curl -f http://localhost:5000/health || exit 1
          docker-compose down

  # E2E tests (only on main branch)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Docker Compose
        run: |
          docker-compose up -d
          sleep 60  # Wait for services to start
          
      - name: Install test dependencies
        run: |
          pip install pytest requests selenium webdriver-manager
          
      - name: Run E2E tests
        run: |
          pytest tests/ -m "e2e" -v
        env:
          FOUNDRY_API_URL: http://localhost:5000
          
      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose logs > docker-compose.log
          
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: docker-compose.log
          
      - name: Cleanup
        if: always()
        run: docker-compose down

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install locust pytest-benchmark
          
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v --benchmark-only
          
      - name: Run load tests
        run: |
          locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:5000

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Documentation build
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install documentation dependencies
        run: |
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
          pip install -r backend/requirements.txt
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Release preparation (only on main branch)
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Generate changelog
        run: |
          pip install gitchangelog
          gitchangelog > CHANGELOG.md
          
      - name: Update version
        run: |
          # Version update logic here
          echo "Version update would happen here"
          
      - name: Create release artifacts
        run: |
          # Create release artifacts
          tar -czf foundry-release.tar.gz --exclude='.git' --exclude='__pycache__' .
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: foundry-release.tar.gz